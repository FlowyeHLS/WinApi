#include <windows.h>
#include <string>
#include <sstream>

#define SZ_CLASS_NAME L"CenteredWindowClass"


LRESULT CALLBACK WndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int WINAPI wWinMain(_In_ HINSTANCE hInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPWSTR lpCmdLine, _In_ int nCmdShow) {
    WNDCLASSEXW wClass = { sizeof(WNDCLASSEXW) };
    wClass.style = CS_HREDRAW | CS_VREDRAW;
    wClass.lpfnWndProc = WndProc;
    wClass.cbClsExtra = 0;
    wClass.cbWndExtra = 0;
    wClass.hInstance = hInstance;
    wClass.hIcon = LoadIconW(NULL, (LPCWSTR)IDI_APPLICATION);
    wClass.hCursor = LoadCursorW(NULL, (LPCWSTR)IDC_ARROW);
    wClass.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wClass.lpszMenuName = NULL;
    wClass.lpszClassName = SZ_CLASS_NAME;
    wClass.hIconSm = LoadIconW(NULL, (LPCWSTR)IDI_APPLICATION);

    if (!RegisterClassExW(&wClass)) {
        MessageBoxW(NULL, L"Window registration failed.", L"Error", MB_OK | MB_ICONERROR);
        return 1;
    }

    // Get screen dimensions
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Calculate window size and position
    int windowWidth = static_cast<int>(screenWidth * 0.75);
    int windowHeight = static_cast<int>(screenHeight * 0.75);
    int windowX = (screenWidth - windowWidth) / 2;
    int windowY = (screenHeight - windowHeight) / 2;

    HWND hwnd = CreateWindowExW(
        0,
        SZ_CLASS_NAME,
        L"Centered Window", // Initial title (will be updated in WndProc)
        WS_OVERLAPPEDWINDOW,
        windowX, windowY, // Use calculated position
        windowWidth, windowHeight, // Use calculated size
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (!hwnd) {
        MessageBoxW(NULL, L"Window creation failed.", L"Error", MB_OK | MB_ICONERROR);
        return 1;
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_SIZE:
    case WM_MOVE: {
        RECT rect;
        GetWindowRect(hwnd, &rect);
        int x = rect.left;
        int y = rect.top;
        int width = rect.right - rect.left;
        int height = rect.bottom - rect.top;

        std::wstringstream titleStream;
        titleStream << L"X:" << x << L" Y:" << y << L" Width:" << width << L" Height:" << height;

        SetWindowTextW(hwnd, titleStream.str().c_str());
        break;
    }
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProcW(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}
